Application: Piece of code eg. online banking,online shopping
Different type of appln 
standalone,web and enterprise

standalone:installed on laptop and access on laptop only eg: vlc player, ms office
web:website access this appln across through globe eg:www.edureka.com (webserver)
entreprise: online banking,ebusinesss application,amazon, flipkart(sophisticated env)


Webserver:
Apache
nginx
tomcat
iis

Application server:
Webspere
jboss
glassfish
weblogic

wrting code is one part and hosting is second part

server that serve some thing whatever end user request
client--> applnt--> db  (3 tier architecture)

Authorization: you are authorized to perform that action or not
Authentication: validating the credential.


s/w engineering 
devlopemnt , operation(hosting) maintenance(maintain the appln)

eg:Android
IOS

waterfall model
step by step approach 
requirement gthering-->design-->code->testing-->deployment -->maint
tightly coupled(monolithic arch)
All the application on single machine such as db, appln etc is called the monolithic architecture eg:hotel application

Agile
everything can be done in parellel
It is continuous improvement process
N-tier architecture
webeserver on another server
db on the another server
distributed arch
physical server to virtual server
dc to hosted environment

Devops
Microservices
container(Docker)
cloud(AWS,Azure,GCP,Digital ocean, Open shift):Pay as you use

Agile is fast and iterative
docter eg for the different environment

devops is a re-organisation not a new team to hire
it is combined effort of devlopment and operation team
to release application faster way
to give new feature to the client in faster way
agile operation delivery
Agile: 3 Months
Devops: 9 min
For every changes or feature is creating we need to push it to deployment, no need to wait as it will create easy way to identify the issue as we compare if we push 100 feature to deployment
three pillars:
Infrastructure automation
continuous delivery
reliablity engineering 
nevere ending process
automate infra
continuos delivery
Waterfall model:
design-->code-->test-->deploy

Agile:
design-->code-->test-->design-->code-->test-->design-->code-->test-->design-->code-->test-->deploy

Agile with continuos deploy:
design-->code-->test-->deploy-->design-->code-->test-->deploy-->design-->code-->test-->deploy-->design-->code-->test-->deploy-->design-->code-->test-->deploy

Devops Lifecycle
1)planning tool:trello rally jira
2)coding tools:eclipse
3)build tools:maven
4)test tool:junit,selenium
5)release:jenkin, travis , bamboo
6)deploy:ansible, chef,puppet
7)operate:
8)monitoring:nagios

version control or SCM
track your code.
multiple user manage multiple revision of same unit of information
1)local: mantain it in your local machine
2)centralized:central server if central server fail then entire system goes down
3)Distributed:Remote server and local machine if any server goes down it can be restore(GIT)
local repo is the user copy and user access through local copy and push it to the remote repo if there are any changes	

mkdir prj--> make the directory
git init--> initialize the prj one time initialization
git config --global user.name username
git config --global user.email useremail
commit id 
you can tag version to commit id
-----------------------------------------------------------------------------------------------------------------------
1. make your changes create delete update to prj code
2.add them to local git repo (staging).eg file download to temp area while downloading the file from internet
3.commit them
4.git push -u origin master (remote server)


git log (which will show what are the changes you made to the prj time, user, author, commit id(hexadecimal))
last commited change is called as head(recent commit)
staging area is like playground
git log --oneline (in shortform)
when you want to make multiple changes staging is the good option
whatever add to git it would takecare of that.
ls -a
cd .git

git rm filename =rm +git add
git rm --cached file1 (going frwd it will not track file1)
git rm -f file1 = forcefully remove the file git repo 
vi .gitignore(mention the file name)
git commit --ammend
git tag --a 1.1 -m "hotfix"(you cannot tagged again with same version) it consider recent commit id
git show v1.3
git show commitid
git diff Head..Head~2 (commit id instead of head)
git reset --hard commitid(it will take back to the mention commit id)your recent changes will be gone 
git revert commitid==> enter some comment and save & close==> git log commit id is still der but changes are there with commit id (your recent changes will be there and it create new commit id )

1. remote --> get into local
2. local--> send it into remote

git remote add origin repolink
git remote -v
git push -u origin master 


when you are copying the data for the first time called as cloning
git clone URL
remote repo is the standard 
git pull

branching:

git maintain the virtual copy
eg JAN is master (main)by default -------you create it will be the master only 

git branch branchname
git branch(list the branch * means current branch)
git checkout branchname
git checkout master 
git merge branchname
git branch -d branchname(merge branch)
git branch -D branchname(unmerge branch)
git merge branchname(merge conflict will failed the automerge)==> make the decision which changes to take and make the necessary changes and add and commit
merge conflict we need to do it manually
git push --set-upstream origin branchname
git stash--> you prepare some new code to proj don't commit that code will see it for future realease then send it to hiden area 
git stash list 
git stash apply==(will get back the data that is beaing saved to the hidden area)
git rebase
chksum(by default git uses to check whether the file is modified)
git commit -a -m "message"
--------------------------------------------------------------------------------------------------------------------------------------------------------

Jenkin java based tool open source it is browser based tool
continuous integration
whenever devloper writes the code he makes main copy that iavalaible online that is centralised location code is avaliable in  git
next step 
whenever we deploy the code it will be in the form .jar(java) .war(web) .ear(enterprise)[Artifact]deployable application file
we need to build the could that should be in the above format is called as build build tool: "ant" "maven" 
after building we give the version
whenever a commit happen a build has to be run
jenkin continuously monitor the git hub when changes occur it autmatically build the code
compile:high level language to machine readable language(byte code)
code review: syntax error extra method forget to close before compilation
unit test:checking the code line by line devlopment level testing while the devlopemnt stage
QA metric check:how much of code tested code coverage tested 
package : 
else u need to run the manual using "maven compile maven test"
above step can br performed automatically by using jenkin
after deployment we need to test the appln
jenkin help building artifact, deployment,test(selenium)
Continuous delivery:if you stop before prod it called as continuous delivery
Continuous deploymnet: if you proceed till prod is called as continuous deployment
once artifact is generated it is called as build and release 
hudson is he prior name of jenkin
ci detect issue in build early as possible
jfrog,nexus  is the artifactory to store the artifact 
plugin is the peice of s/w to talk to other technolgy git plugin(jenkin to perform more core functionality)
in windows jenkin is installed as service services.msc
download the WAR jenkin file copy to tomcat, websphere start the app server
job/project: job are created in jenkin that whenever you build or run any command through jenkin job afe created 
executor: That run your job tyres are executor gear is you job as example of CAR
need to setup  global tool config in jenkin
build triggers how many way we ran our jobs
triggering the build from remote location
creating dependency built after other prj are built
build periodically(crontab in unix)
poll SCM you keep on oberserving github repo 
unstable build original task successfull if some report are unsuccessful
LDAP: light weight directory protocol(In organisation mostly we used LDAP)
matrix based security : which user can access to jenkin component 
we can restrict jenkin user  job using enable project based security

-------------------------------------------------------------------------------------------------------------------------------------------------------------
how to perform the build process 
build tools available maven
why jenkin if maven can do all this thing such as compile review unittest perfoemance metric package management
build operation happens on jenkin machine 
once WAR file are generated we deploy to the dev uat prod
maven is build tool
maven project are manage through POM project object model 
pom.xml is also part of the prj devloper writes 
maven is agin based on plugin
maven validate
maven compile
maven test
maven package

mvn compile
mvn -P metrics pmd:pmd
mvn test
mvn cobertura:cobertura -Dcobertura.report.format=xml
mvn package
clean build space whenever new buid run
whenever you install jenkin in any machine that will become master for the same
we can schedule job on slave node from master so there will be no load on master
don't need to install jenkin on slave node just need to run agent this agent will communicate and run those task
first we need to enable agent tcp port for agent random or fix(random)
manage node==> new node
how to start use java webstart
git java maven need to install on slave node if the jobs are running from them
we can autmate all this 5 step process into single file that is jenkinfile pipeline as code
--------------------------
configuration management
-------------------------
Infrastructure automation Ansible , Puppet
using selenium for functional testing
change mangement CAB(change advisory board)
any changes to your infra is part of configuration management eg. tomcat installation
config identification
config control(change management)
config audit if something changes you need to keep an eye
deliver your s/w as quickly as possible in DevOps
--------------------------------------------------------------------------------------------------------------------------------------------------

